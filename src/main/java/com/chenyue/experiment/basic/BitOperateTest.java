package com.chenyue.experiment.basic;

/**
 * @author chenyue7@foxmail.com
 * @date 2021/3/17
 * @description
 * '与' '非' '或'  '异或'
 *  &    ~   |     ^
 *
 *  << 左移运算符，在低位补0(保留符号位)
 *  >> 根据符号位，在符号位补1或者0
 *  >>> 不管符合位，高位都补0
 */
public class BitOperateTest {
    public static void main(String[] args) {
        testSwapNumber();
    }

    static void testBitOperator() {
        // 原码 1000 0000 0000 0000 0000 0000 0000 1010
        // 反码 1111 1111 1111 1111 1111 1111 1111 0101
        // 补码 1111 1111 1111 1111 1111 1111 1111 0110
        //
        int num = -10;
        int i = num << 1;
        System.out.println(i);
        int i1 = num >>> 1; //（无符号右移） 0111 1111 1111 1111 1111 1111 1111 1011
        System.out.println(i1); // 2147483643

        //有符号右移 >>> 1111 1111 1111 1111 1111 1111 1111 1011 （补码）
        // 反码 1111 1111 1111 1111 1111 1111 1111 1010
        // 原码 1000 0000 0000 0000 0000 0000 0000 0101 （-5）
        int i2 = num >> 1;
        System.out.println(i2); // -5

        //有符号右移 >>> 1111 1111 1111 1111 1111 1111 1111 1101 （补码）
        // 反码 1111 1111 1111 1111 1111 1111 1111 1100
        // 原码 1000 0000 0000 0000 0000 0000 0000 0011 （-3）
        int i3 = num >> 2;
        System.out.println(i3); // -3

        // 补码 1111 1111 1111 1111 1111 1111 1111 0110
        // 有符号右移 >>> 1111 1111 1111 1111 1111 1111 1111 1111 （补码）
        // 反码 1111 1111 1111 1111 1111 1111 1111 1110
        // 原码 1000 0000 0000 0000 0000 0000 0000 0001 （-1）
        int i4 = num >> 6;
        System.out.println(i4); // -1
    }

    /**
     * 使用位运算交换两个变量，不使用中间变量
     */
    static void testSwapNumber() {
        // 0000 0000 0000 0000 0000 0000 0000 1000
        int a = 8;
        // 1000 0000 0000 0000 0000 0000 0000 1000
        int b = -8;

        a = a ^ b; // 1000 0000 0000 0000 0000 0000 0000 0000
        b = a ^ b; // 0000 0000 0000 0000 0000 0000 0000 1000 (8)
        a = a ^ b; // 1000 0000 0000 0000 0000 0000 0000 1000 (-8)
        System.out.println("a: " + a +",b: " + b);
    }
}
